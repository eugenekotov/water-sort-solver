(()=>{"use strict";var u,S={727:(u,p,g)=>{class N{constructor(){this.colors=[]}static equal(e,t){if(e.colors.length!==t.colors.length)return!1;for(let o=0;o<e.colors.length;o++)if(e.colors[o]!==t.colors[o])return!1;return!0}}class i{constructor(){this.resolved=!1}static checkRsolved(e){e.resolved=i.isFull(e)&&i.hasOnlyOneColor(e)}static size(e){return e.gameContainer.colors.length}static isEmpty(e){return 0===i.size(e)}static isFull(e){return 4===i.size(e)}static peek(e){return e.gameContainer.colors[e.gameContainer.colors.length-1]}static push(e,t){e.gameContainer.colors.push(t),i.checkRsolved(e)}static pop(e){e.resolved=!1;const t=e.gameContainer.colors.pop();if(!t)throw new Error("Cannot pop color from empty container");return t}static hasOnlyThreeOfOneColor(e){return 3===i.size(e)&&e.gameContainer.colors[0]===e.gameContainer.colors[1]&&e.gameContainer.colors[0]===e.gameContainer.colors[2]}static hasOnlyTwoOfOneColor(e){return 2===i.size(e)&&e.gameContainer.colors[0]===e.gameContainer.colors[1]}static hasOnlyOneOfOneColor(e){return 1===i.size(e)}static hasOnlyOneColor(e){return!i.isEmpty(e)&&e.gameContainer.colors.every(t=>t===e.gameContainer.colors[0])}static clone(e){const t=new i;return t.gameContainer=new N,t.gameContainer.colors=[...e.gameContainer.colors],t.resolved=e.resolved,t.index=e.index,t}}class a{constructor(){this.boardContainers=[]}static create(e){const t=new a;return void 0!==e&&(t.boardContainers=e.map((o,s)=>({gameContainer:o,resolved:!1,index:s}))),t}static isResolved(e){let t=!0,o=0;for(;o<e.boardContainers.length;){let s=e.boardContainers[o];0===s.gameContainer.colors.length?o++:s.resolved?e.boardContainers.splice(o,1):(t=!1,o++)}return t}static clone(e){const t=new a;return t.boardContainers=e.boardContainers.map(o=>i.clone(o)),t}static equal(e,t){if(e.boardContainers.length!==t.boardContainers.length)return!1;for(let o=0;o<e.boardContainers.length;o++)if(a.getContainerCount(t,e.boardContainers[o])!==a.getContainerCount(e,e.boardContainers[o]))return!1;return!0}static getContainerCount(e,t){return e.boardContainers.filter(o=>N.equal(o.gameContainer,t.gameContainer)).length}}function y(n,e){return n.some(t=>a.equal(t,e))}function m(n,e){e instanceof a?y(n,e)||n.push(e):n=[...n,...e]}class O{constructor(e,t,o){this.notes="",this.iFrom=e,this.iTo=t,this.color=o}clone(){const e=new O(this.iFrom,this.iTo,this.color);return e.notes=this.notes,e}equals(e){return this.iFrom===e.iFrom&&this.iTo===e.iTo&&this.color===e.color}}var h=(()=>{return(n=h||(h={}))[n.CANCEL=0]="CANCEL",n[n.NO_SOLUTION=1]="NO_SOLUTION",n[n.SOLUTION=2]="SOLUTION",n[n.BEST_SOLUTION=3]="BEST_SOLUTION",h;var n})();class d{constructor(){this.stepCount=0,this.oldBoards=[],this.steps=[]}}function w(n,e,t,o,s){n=a.clone(n);for(let r=0;r<o;r++)i.push(n.boardContainers[t],i.pop(n.boardContainers[e])),s.steps.push(new O(n.boardContainers[e].index,n.boardContainers[t].index,i.peek(n.boardContainers[t])));return s.board=n,s.stepCount=s.stepCount+o,m(s.oldBoards,n),n}class _{constructor(){this.steps=[]}}class R{constructor(){this.solutions=[]}}class x{constructor(){this.containers=[],this.oldBoards=[],this.steps=[],this.solutions=new R,this.bestSolution=void 0,this.counter=0,this.logicFunctions=[]}}function I(n,e,t){if(console.log(t),n.counter++,a.isResolved(e))return void v(n);const o=function j(n,e){const t=new d;let o=!0;for(;o;)o=!1,n.logicFunctions.forEach(s=>{const r=s(e);r.stepCount>0&&(o=!0,e=r.board,t.stepCount=t.stepCount+r.stepCount,m(t.oldBoards,r.oldBoards),t.steps=[...t.steps,...r.steps])});return t.board=e,t}(n,e);if(o.stepCount>0&&(e=o.board,t+=o.stepCount,m(n.oldBoards,o.oldBoards),n.steps=[...n.steps,...o.steps],a.isResolved(e)))v(n);else for(let s=0;s<e.boardContainers.length;s++)for(let r=0;r<e.boardContainers.length;r++)s!==r&&q(n,e,s,r,t)}function q(n,e,t,o,s){i.isEmpty(e.boardContainers[t])||i.isFull(e.boardContainers[o])||!i.isEmpty(e.boardContainers[o])&&i.peek(e.boardContainers[t])!=i.peek(e.boardContainers[o])||1==i.size(e.boardContainers[t])&&i.isEmpty(e.boardContainers[o])||i.hasOnlyThreeOfOneColor(e.boardContainers[t])||i.hasOnlyOneColor(e.boardContainers[t])&&i.isEmpty(e.boardContainers[o])||(e=function B(n,e,t){return n=a.clone(n),i.push(n.boardContainers[t],i.pop(n.boardContainers[e])),n}(e,t,o),!y(n.oldBoards,e)&&(n.steps.push(new O(e.boardContainers[t].index,e.boardContainers[o].index,i.peek(e.boardContainers[o]))),m(n.oldBoards,e),I(n,e,s+1),function P(n,e){for(;n.steps.length>e;)n.steps.pop()}(n,s)))}function v(n){const e=function Y(n){const e=n.steps;let r=0,C=!0;for(;C;){for(C=!1,r=0;r<e.length-1;){let l=r+1;for(;l<e.length&&(e[r].iFrom!==e[l].iTo||e[r].iTo!==e[l].iFrom)&&e[r].iFrom!==e[l].iFrom&&e[r].iFrom!==e[l].iTo&&e[r].iTo!==e[l].iFrom&&e[r].iTo!==e[l].iTo;)l++;l<e.length&&e[r].iFrom===e[l].iTo&&e[r].iTo===e[l].iFrom?(e.splice(l,1),e.splice(r,1),C=!0):r++}for(r=0;r<e.length-1;){let c=r+1;for(;c<e.length&&e[r].iTo!==e[c].iFrom;)c++;if(c<e.length&&e[r].iTo===e[c].iFrom){let l=c-1,F=!1;for(;r<l;){if((e[l].iFrom===e[c].iFrom||e[l].iFrom===e[c].iTo||e[l].iTo===e[c].iFrom||e[l].iTo===e[c].iTo)&&e[l].color!==e[c].color){F=!0;break}l--}!1===F?(e[r].iTo=e[c].iTo,e[r].notes="Updated by optimization 2",e.splice(c,1),C=!0):r++}else r++}for(r=0;r<e.length-1;)e[r].iFrom===e[r].iTo?(e.splice(r,1),C=!0):r++}return n}(function b(n){const e=new _;return e.steps=[],n.forEach(t=>e.steps.push(t.clone())),e}(n.steps));(function A(n,e){return!n.solutions.some(t=>function z(n,e){if(n.steps.length!==e.steps.length)return!1;for(let t=0;t<n.steps.length;t++)if(!n.steps[t].equals(e.steps[t]))return!1;return!0}(t,e))&&(n.solutions.push(e),!0)})(n.solutions,e)&&(void 0===n.bestSolution||e.steps.length<n.bestSolution.steps.length)&&(n.bestSolution=e,T(h.SOLUTION,e))}function T(n,e){postMessage({result:n,solution:e})}addEventListener("message",({data:n})=>{!function M(n){const e=new x;e.containers=n,e.oldBoards=[],e.steps=[],e.solutions.solutions=[],e.bestSolution=void 0,e.counter=0,e.logicFunctions.push(function k(){return e=>{const t=new d;let o=!0;for(;o;){o=!1;for(let s=0;s<e.boardContainers.length;s++)if(i.hasOnlyThreeOfOneColor(e.boardContainers[s])){const r=n(e,e.boardContainers[s].gameContainer.colors[0],s);if(-1!==r){e=w(e,r,s,1,t),o=!0;break}}}return t};function n(e,t,o){for(let s=0;s<e.boardContainers.length;s++)if(s!==o&&!i.isEmpty(e.boardContainers[s])&&i.peek(e.boardContainers[s])===t)return s;return-1}}()),e.logicFunctions.push(function E(){return e=>{const t=new d;let o=!0;for(;o;){o=!1;for(let s=0;s<e.boardContainers.length;s++)if(i.hasOnlyTwoOfOneColor(e.boardContainers[s])){const r=n(e,e.boardContainers[s].gameContainer.colors[0],s);if(-1!==r){e=w(e,r,s,2,t),o=!0;break}}}return t};function n(e,t,o){for(let s=0;s<e.boardContainers.length;s++)if(s!==o&&i.size(e.boardContainers[s])>1&&e.boardContainers[s].gameContainer.colors[i.size(e.boardContainers[s])-1]===t&&e.boardContainers[s].gameContainer.colors[i.size(e.boardContainers[s])-2]===t)return s;return-1}}()),e.logicFunctions.push(function U(){return e=>{const t=new d;let o=!0;for(;o;){o=!1;for(let s=0;s<e.boardContainers.length;s++)if(i.hasOnlyOneOfOneColor(e.boardContainers[s])){const r=n(e,e.boardContainers[s].gameContainer.colors[0],s);if(-1!==r){e=w(e,r,s,3,t),o=!0;break}}}return t};function n(e,t,o){for(let s=0;s<e.boardContainers.length;s++)if(s!==o&&4==i.size(e.boardContainers[s])&&e.boardContainers[s].gameContainer.colors[i.size(e.boardContainers[s])-1]===t&&e.boardContainers[s].gameContainer.colors[i.size(e.boardContainers[s])-2]===t&&e.boardContainers[s].gameContainer.colors[i.size(e.boardContainers[s])-3]===t)return s;return-1}}()),I(e,a.create(e.containers),0),void 0===e.bestSolution?T(h.NO_SOLUTION,void 0):T(h.BEST_SOLUTION,e.bestSolution)}(n)})}},f={};f.m=S,f.u=u=>u+".acfd0029abcdacc9.js",f.o=(u,p)=>Object.prototype.hasOwnProperty.call(u,p),f.tt=()=>(void 0===u&&(u={createScriptURL:p=>p},typeof trustedTypes<"u"&&trustedTypes.createPolicy&&(u=trustedTypes.createPolicy("angular#bundler",u))),u),f.tu=u=>f.tt().createScriptURL(u),f.p="",f.b=self.location+"",S[727](0,{},f)})();